////////////////////////////////////////////////////////////
//
// AStar for occupancy grid
//
////////////////////////////////////////////////////////////
#ifndef ASTAR_H
#define ASTAR_H

#include <iostream>
#include <cmath>
#include <queue>  
#include <vector>
#include <algorithm>

#include "AStarNode.h"

class AStar
{
	public:
		// Enumerated types
		enum searchType {ASTAR,DJ,GREEDY};
		enum mapType {FOUR,EIGHT};
		
	    ////////////////////////////////////////////////////////////
	    /// \brief Default constructor
	    ///
	    /// \param grid_size_    Size of the grid as voxels
	    ////////////////////////////////////////////////////////////
		AStar(unsigned grid_size_);

	    ////////////////////////////////////////////////////////////
	    /// \brief Set map from ogrid
	    ///
	    /// \param ogridBinary   Copy occupany grid into Astar grid
	    ////////////////////////////////////////////////////////////		
		void setMap(const std::vector< std::vector<bool> >  &ogridBinary);
 
	    ////////////////////////////////////////////////////////////
	    /// \brief Change AStar settings
	    ///
	    /// \param ?
	    /// \param ?
	    ////////////////////////////////////////////////////////////			
		void setMode(searchType search, mapType map) { whichSearch = search; whichMap = map; }
	
	    ////////////////////////////////////////////////////////////
	    /// \brief Set the start node
	    ///
	    /// \param ?
	    /// \param ?
	    ////////////////////////////////////////////////////////////				
		void setStart(unsigned x, unsigned y);

	    ////////////////////////////////////////////////////////////
	    /// \brief Set the finish node
	    ///
	    /// \param ?
	    /// \param ?
	    ////////////////////////////////////////////////////////////			
		void setFinish(unsigned x, unsigned y);

	    ////////////////////////////////////////////////////////////
	    /// \brief Reset the entire map
	    ///
	    ////////////////////////////////////////////////////////////			
		void reset();

	    ////////////////////////////////////////////////////////////
	    /// \brief The actual aglorithm
	    ///
	    ////////////////////////////////////////////////////////////
		std::vector< std::pair<int,int> > run();

    	////////////////////////////////////////////////////////////
    	// Public Member data
    	////////////////////////////////////////////////////////////
		const unsigned ROI_SIZE;	///< ???
		searchType whichSearch; 	///< ???
		mapType whichMap;			///< ???
		std::vector< std::vector<node> > map;	///< ???
		node startNode, endNode;				///< ???

	private:
	    ////////////////////////////////////////////////////////////
	    /// \brief Update function that checks neighbors and for lowest cost 
	    ///
	    /// \param ?
	    /// \param ?
	    /// \param ?
	    ////////////////////////////////////////////////////////////			
		void update(node &nextNode, std::priority_queue<node,std::vector<node>,CompareNodes> &openList);

    	////////////////////////////////////////////////////////////
    	// Private Member data
    	////////////////////////////////////////////////////////////
		const int stepSize[2] = {4,8};
		std::vector<std::vector<int>> xs= { {0,-1,1,0}, {-1,0,1,-1,1,-1,0,1} };		///< ???
		std::vector<std::vector<int>> ys= { {-1,0,0,1}, {-1,-1,-1,0,0,1,1,1} };		///< ???
};

#endif
